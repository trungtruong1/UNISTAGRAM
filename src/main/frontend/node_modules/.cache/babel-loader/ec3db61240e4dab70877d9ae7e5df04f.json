{"ast":null,"code":"var _jsxFileName = \"/home/kurone/unist/se/UNISTAGRAM/src/main/frontend/src/components/chess_board.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from 'react';\nimport Chess from '../ultils/chess.js';\nimport { Chessboard } from 'react-chessboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SquareStyles(_ref) {\n  _s();\n\n  let {\n    selectPieceState,\n    matchInfo,\n    userInfo,\n    randomPiece\n  } = _ref;\n  const chessboardRef = useRef();\n  const [game, setGame] = useState(new Chess(matchInfo.fen));\n  const [orientation, setOrientation] = useState(matchInfo.white_player === userInfo.username ? \"white\" : \"black\");\n  const [playerTurn, setPlayerTurn] = useState(matchInfo.white_player === userInfo.username ? \"w\" : \"b\");\n  const [chessboardSize, setChessboardSize] = useState(undefined);\n  const socket = useRef({});\n  const piecePoints = {\n    'p': 1,\n    'cp': 1,\n    'n': 3,\n    'b': 3,\n    'r': 5,\n    'q': 9,\n    'k': 90\n  };\n  useEffect(() => {\n    function handleResize() {\n      const display = document.getElementById(\"board_area\");\n      setChessboardSize(display.offsetWidth * 0.8);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  useEffect(() => {\n    let ignore = false;\n\n    async function makeAMove(move, data) {\n      console.log(data);\n\n      if (data.is_put) {\n        const gameCopy = { ...game\n        };\n        gameCopy.load(data.fen);\n        setGame(gameCopy);\n        if (data.player === userInfo.username) return true;\n        const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const match_data = await match.json();\n        matchInfo.my_points = playerTurn === 'w' ? match_data.white_points : match_data.black_points;\n        document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\n        return true;\n      }\n\n      const gameCopy = { ...game\n      };\n      const result = gameCopy.move(move);\n      setGame(gameCopy);\n      setMoveSquares({\n        [data.move.from]: {\n          backgroundColor: 'rgba(255, 255, 0, 0.4)'\n        },\n        [data.move.to]: {\n          backgroundColor: 'rgba(255, 255, 0, 0.4)'\n        }\n      });\n      const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const match_data = await match.json();\n      matchInfo.my_points = playerTurn === 'w' ? match_data.white_points : match_data.black_points;\n      document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\n      return result; // null if the move was illegal, the move object if the move was legal\n    }\n\n    async function fetchData() {\n      if (ignore) return;\n      updateStatus();\n      const roll_button = document.getElementById(\"roll_button\");\n      roll_button.disabled = playerTurn !== game.turn();\n      socket.move = new WebSocket(`ws://localhost:8000/ws/move/${matchInfo.id}/`);\n\n      socket.move.onmessage = function (e) {\n        const data = JSON.parse(e.data);\n        if (data.player === userInfo.username && !data.is_put) return;\n        makeAMove(data.move, data);\n        console.log(matchInfo);\n        updateStatus();\n      };\n\n      socket.move.onclose = function (e) {\n        console.error('Chat socket closed unexpectedly');\n      };\n    }\n\n    fetchData();\n    return () => {\n      ignore = true;\n    };\n  }, []);\n  const [rightClickedSquares, setRightClickedSquares] = useState({});\n  const [moveSquares, setMoveSquares] = useState({});\n  const [optionSquares, setOptionSquares] = useState({});\n\n  function updateStatus() {\n    const status = document.getElementById(\"status\");\n    if (game.turn() === 'w') status.textContent = \"Status: white to move\";else status.textContent = \"Status: black to move\";\n    if (game.in_check()) status.textContent += \" / checked\";\n    const roll_button = document.getElementById(\"roll_button\");\n    roll_button.disabled = !roll_button.disabled;\n  }\n\n  async function increasePoints(move) {\n    // If the move capture a piece\n    if (move.flags === 'e' || move.flags === 'c' || move.flags === 'pc' || move.flags === 'cp') {\n      const gameCopy = { ...game\n      };\n      gameCopy.undo();\n      let piece = gameCopy.get(move.to);\n      let type;\n      if (piece == null) type = 'cp';else type = gameCopy.get(move.to).type;\n      gameCopy.move(move);\n      const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const match_data = await match.json();\n      matchInfo.my_points = playerTurn === 'w' ? match_data.white_points : match_data.black_points;\n      document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\n    }\n  }\n\n  function onDrop(sourceSquare, targetSquare) {\n    if (playerTurn !== game.turn()) return;\n    const gameCopy = { ...game\n    };\n    const move = gameCopy.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for example simplicity\n\n    });\n    setGame(gameCopy); // illegal move\n\n    if (move === null) return false;\n    setMoveSquares({\n      [sourceSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      },\n      [targetSquare]: {\n        backgroundColor: 'rgba(255, 255, 0, 0.4)'\n      }\n    });\n    increasePoints(move);\n    socket.move.send(JSON.stringify({\n      'player': userInfo.username,\n      'fen': game.fen(),\n      'is_put': false,\n      'move': move\n    }));\n    updateStatus();\n    return true;\n  }\n\n  function onMouseOverSquare(square) {\n    if (playerTurn !== game.turn()) return;\n    getMoveOptions(square);\n  } // Only set squares to {} if not already set to {}\n\n\n  function onMouseOutSquare() {\n    if (playerTurn !== game.turn()) return;\n    if (Object.keys(optionSquares).length !== 0) setOptionSquares({});\n  }\n\n  function getMoveOptions(square) {\n    if (playerTurn !== game.turn()) return;\n    const moves = game.moves({\n      square,\n      verbose: true\n    });\n\n    if (moves.length === 0) {\n      return;\n    }\n\n    const newSquares = {};\n    moves.map(move => {\n      newSquares[move.to] = {\n        background: game.get(move.to) && game.get(move.to).color !== game.get(square).color ? 'radial-gradient(circle, rgba(0,0,0,.1) 85%, transparent 85%)' : 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\n        borderRadius: '50%'\n      };\n      return move;\n    });\n    newSquares[square] = {\n      background: 'rgba(255, 255, 0, 0.4)'\n    };\n    setOptionSquares(newSquares);\n  }\n\n  function onSquareClick(square) {\n    setRightClickedSquares({});\n    if (!randomPiece.selected_piece) return;\n    if (!game.get(square)) return;\n    if (game.get(square).type !== 'p') return;\n    if (game.get(square).color !== playerTurn) return;\n    let piece = randomPiece.selected_piece;\n    piece = playerTurn === 'w' ? piece.toUpperCase() : piece;\n    socket.move.send(JSON.stringify({\n      'player': userInfo.username,\n      'fen': game.fen(),\n      'is_put': true,\n      'move': `SET ${square} ${piece}`\n    }));\n    randomPiece.selected_piece = null;\n    document.getElementById(\"selected_piece\").textContent = `You are not picking`;\n    piece = piece.toLowerCase();\n    console.log(`piece_${piece}`);\n    selectPieceState[`set${piece}`]({\n      state: selectPieceState[`${piece}`].number - 1 === 0,\n      number: selectPieceState[`${piece}`].number - 1\n    });\n  }\n\n  function onSquareRightClick(square) {\n    const colour = 'rgba(0, 0, 255, 0.4)';\n    setRightClickedSquares({ ...rightClickedSquares,\n      [square]: rightClickedSquares[square] && rightClickedSquares[square].backgroundColor === colour ? undefined : {\n        backgroundColor: colour\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"SquareStyles\",\n      animationDuration: 200,\n      boardWidth: chessboardSize,\n      position: game.fen(),\n      onMouseOverSquare: onMouseOverSquare,\n      onMouseOutSquare: onMouseOutSquare,\n      onSquareClick: onSquareClick,\n      onSquareRightClick: onSquareRightClick,\n      onPieceDrop: onDrop,\n      customBoardStyle: {\n        borderRadius: '4px',\n        boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\n      },\n      customSquareStyles: { ...moveSquares,\n        ...optionSquares,\n        ...rightClickedSquares\n      },\n      boardOrientation: orientation,\n      ref: chessboardRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SquareStyles, \"BeuEuqd6ZnMm+DK/8pwHmC/wa9Q=\");\n\n_c = SquareStyles;\n\nvar _c;\n\n$RefreshReg$(_c, \"SquareStyles\");","map":{"version":3,"names":["useRef","useState","useEffect","Chess","Chessboard","SquareStyles","selectPieceState","matchInfo","userInfo","randomPiece","chessboardRef","game","setGame","fen","orientation","setOrientation","white_player","username","playerTurn","setPlayerTurn","chessboardSize","setChessboardSize","undefined","socket","piecePoints","handleResize","display","document","getElementById","offsetWidth","window","addEventListener","removeEventListener","ignore","makeAMove","move","data","console","log","is_put","gameCopy","load","player","match","fetch","in_game","method","headers","match_data","json","my_points","white_points","black_points","textContent","result","setMoveSquares","from","backgroundColor","to","fetchData","updateStatus","roll_button","disabled","turn","WebSocket","id","onmessage","e","JSON","parse","onclose","error","rightClickedSquares","setRightClickedSquares","moveSquares","optionSquares","setOptionSquares","status","in_check","increasePoints","flags","undo","piece","get","type","onDrop","sourceSquare","targetSquare","promotion","send","stringify","onMouseOverSquare","square","getMoveOptions","onMouseOutSquare","Object","keys","length","moves","verbose","newSquares","map","background","color","borderRadius","onSquareClick","selected_piece","toUpperCase","toLowerCase","state","number","onSquareRightClick","colour","boxShadow"],"sources":["/home/kurone/unist/se/UNISTAGRAM/src/main/frontend/src/components/chess_board.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\r\nimport Chess from '../ultils/chess.js';\r\n\r\nimport { Chessboard } from 'react-chessboard';\r\n\r\nexport default function SquareStyles({selectPieceState, matchInfo, userInfo, randomPiece}) {\r\n    const chessboardRef = useRef();\r\n    const [game, setGame] = useState(new Chess(matchInfo.fen));\r\n    const [orientation, setOrientation] = useState((matchInfo.white_player === userInfo.username)? \"white\" : \"black\");\r\n    const [playerTurn, setPlayerTurn] = useState((matchInfo.white_player === userInfo.username)? \"w\" : \"b\");\r\n\r\n    const [chessboardSize, setChessboardSize] = useState(undefined);\r\n    const socket = useRef({});\r\n\r\n    const piecePoints = {\r\n        'p': 1,\r\n        'cp': 1,\r\n        'n': 3,\r\n        'b': 3,\r\n        'r': 5,\r\n        'q': 9,\r\n        'k': 90\r\n    };\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const display = document.getElementById(\"board_area\");\r\n            setChessboardSize(display.offsetWidth * 0.8);\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n        handleResize();\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let ignore = false;\r\n\r\n        async function makeAMove(move, data) {\r\n            console.log(data);\r\n            if(data.is_put) {\r\n                const gameCopy = { ...game };\r\n                gameCopy.load(data.fen);\r\n                setGame(gameCopy);\r\n                if(data.player === userInfo.username) return true;\r\n                const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                const match_data = await match.json();\r\n                matchInfo.my_points = (playerTurn === 'w')? match_data.white_points : match_data.black_points;\r\n                document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\r\n                return true;\r\n            }\r\n            const gameCopy = { ...game };\r\n            const result = gameCopy.move(move);\r\n            setGame(gameCopy);\r\n            setMoveSquares({\r\n                [data.move.from]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\r\n                [data.move.to]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' }\r\n            });\r\n            const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            const match_data = await match.json();\r\n            matchInfo.my_points = (playerTurn === 'w')? match_data.white_points : match_data.black_points;\r\n            document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\r\n            return result; // null if the move was illegal, the move object if the move was legal\r\n        }\r\n\r\n        async function fetchData() {\r\n            if(ignore) return;\r\n\r\n            updateStatus();\r\n            const roll_button = document.getElementById(\"roll_button\");\r\n            roll_button.disabled = (playerTurn !== game.turn());\r\n            socket.move = new WebSocket(`ws://localhost:8000/ws/move/${matchInfo.id}/`);\r\n            socket.move.onmessage = function(e) {\r\n                const data = JSON.parse(e.data);\r\n                if(data.player === userInfo.username && !data.is_put) return;\r\n                makeAMove(data.move, data);\r\n                console.log(matchInfo);\r\n                updateStatus();\r\n            };\r\n        \r\n            socket.move.onclose = function(e) {\r\n                console.error('Chat socket closed unexpectedly');\r\n            };\r\n            \r\n        }\r\n        \r\n        fetchData();\r\n        return () => { ignore = true; }        \r\n    }, []);\r\n\r\n    const [rightClickedSquares, setRightClickedSquares] = useState({});\r\n    const [moveSquares, setMoveSquares] = useState({});\r\n    const [optionSquares, setOptionSquares] = useState({});\r\n\r\n    function updateStatus() {\r\n        const status = document.getElementById(\"status\");\r\n        if(game.turn() === 'w') status.textContent = \"Status: white to move\";\r\n        else status.textContent = \"Status: black to move\";\r\n        if(game.in_check()) status.textContent += \" / checked\";\r\n\r\n        const roll_button = document.getElementById(\"roll_button\");\r\n        roll_button.disabled = !roll_button.disabled;\r\n    }\r\n\r\n    async function increasePoints(move) {\r\n        \r\n        // If the move capture a piece\r\n        if(move.flags === 'e' || move.flags === 'c' || move.flags === 'pc' || move.flags === 'cp') {\r\n            const gameCopy = { ...game };\r\n            gameCopy.undo();\r\n            let piece = gameCopy.get(move.to);\r\n            let type;\r\n            if(piece == null) type = 'cp';\r\n            else type = gameCopy.get(move.to).type;\r\n            gameCopy.move(move);\r\n            const match = await fetch(`http://localhost:8000/api/match/${userInfo.in_game}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            const match_data = await match.json();\r\n            matchInfo.my_points = (playerTurn === 'w')? match_data.white_points : match_data.black_points;\r\n            document.getElementById(\"my_points\").textContent = `Your Points: ${matchInfo.my_points}`;\r\n        }\r\n    }\r\n\r\n    function onDrop(sourceSquare, targetSquare) {\r\n        if(playerTurn !== game.turn()) return;\r\n        const gameCopy = { ...game };\r\n        const move = gameCopy.move({\r\n            from: sourceSquare,\r\n            to: targetSquare,\r\n            promotion: 'q' // always promote to a queen for example simplicity\r\n        });\r\n        setGame(gameCopy);\r\n        // illegal move\r\n        if (move === null) return false;\r\n        setMoveSquares({\r\n            [sourceSquare]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' },\r\n            [targetSquare]: { backgroundColor: 'rgba(255, 255, 0, 0.4)' }\r\n        });\r\n\r\n        increasePoints(move);\r\n\r\n        socket.move.send(JSON.stringify({\r\n            'player': userInfo.username,\r\n            'fen': game.fen(),\r\n            'is_put': false,\r\n            'move': move\r\n        }));\r\n        updateStatus();\r\n        return true;\r\n    }\r\n\r\n    function onMouseOverSquare(square) {\r\n        if(playerTurn !== game.turn()) return;\r\n        getMoveOptions(square);\r\n    }\r\n\r\n    // Only set squares to {} if not already set to {}\r\n    function onMouseOutSquare() {\r\n        if(playerTurn !== game.turn()) return;\r\n        if (Object.keys(optionSquares).length !== 0) setOptionSquares({});\r\n    }\r\n\r\n    function getMoveOptions(square) {\r\n        if(playerTurn !== game.turn()) return;\r\n        const moves = game.moves({\r\n            square,\r\n            verbose: true\r\n        });\r\n        if (moves.length === 0) { return; }\r\n\r\n        const newSquares = {};\r\n        moves.map((move) => {\r\n            newSquares[move.to] = {\r\n                background:\r\n                game.get(move.to) && game.get(move.to).color !== game.get(square).color\r\n                    ? 'radial-gradient(circle, rgba(0,0,0,.1) 85%, transparent 85%)'\r\n                    : 'radial-gradient(circle, rgba(0,0,0,.1) 25%, transparent 25%)',\r\n                borderRadius: '50%'\r\n            };\r\n            return move;\r\n        });\r\n        newSquares[square] = { background: 'rgba(255, 255, 0, 0.4)' };\r\n        setOptionSquares(newSquares);\r\n    }\r\n\r\n    function onSquareClick(square) {\r\n        setRightClickedSquares({});\r\n        if(!randomPiece.selected_piece) return;\r\n        if(!game.get(square)) return\r\n        if(game.get(square).type !== 'p') return;\r\n        if(game.get(square).color !== playerTurn) return;\r\n        let piece = randomPiece.selected_piece;\r\n        piece = (playerTurn === 'w')? piece.toUpperCase() : piece;\r\n\r\n        socket.move.send(JSON.stringify({\r\n            'player': userInfo.username,\r\n            'fen': game.fen(),\r\n            'is_put': true,\r\n            'move': `SET ${square} ${piece}`\r\n        }));\r\n\r\n        randomPiece.selected_piece = null;\r\n        document.getElementById(\"selected_piece\").textContent = `You are not picking`;\r\n\r\n        piece = piece.toLowerCase();\r\n        console.log(`piece_${piece}`);\r\n        selectPieceState[`set${piece}`]({state: selectPieceState[`${piece}`].number - 1 === 0, number: selectPieceState[`${piece}`].number - 1})\r\n\r\n    }\r\n\r\n    function onSquareRightClick(square) {\r\n        const colour = 'rgba(0, 0, 255, 0.4)';\r\n        setRightClickedSquares({\r\n            ...rightClickedSquares,\r\n            [square]:\r\n                rightClickedSquares[square] && rightClickedSquares[square].backgroundColor === colour\r\n                ? undefined\r\n                : { backgroundColor: colour }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Chessboard\r\n            id=\"SquareStyles\"\r\n            animationDuration={200}\r\n            boardWidth={chessboardSize}\r\n            position={game.fen()}\r\n            onMouseOverSquare={onMouseOverSquare}\r\n            onMouseOutSquare={onMouseOutSquare}\r\n            onSquareClick={onSquareClick}\r\n            onSquareRightClick={onSquareRightClick}\r\n            onPieceDrop={onDrop}\r\n            customBoardStyle={{\r\n                borderRadius: '4px',\r\n                boxShadow: '0 5px 15px rgba(0, 0, 0, 0.5)'\r\n            }}\r\n            customSquareStyles={{\r\n                ...moveSquares,\r\n                ...optionSquares,\r\n                ...rightClickedSquares\r\n            }}\r\n            boardOrientation={orientation}\r\n            ref={chessboardRef}\r\n        />\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}