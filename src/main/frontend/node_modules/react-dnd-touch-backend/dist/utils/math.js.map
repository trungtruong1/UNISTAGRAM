{"version":3,"sources":["../../src/utils/math.ts"],"sourcesContent":["import type { AngleRange } from '../interfaces.js'\n\nexport function distance(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n): number {\n\treturn Math.sqrt(\n\t\tMath.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2),\n\t)\n}\n\nexport function inAngleRanges(\n\tx1: number,\n\ty1: number,\n\tx2: number,\n\ty2: number,\n\tangleRanges: AngleRange[] | undefined,\n): boolean {\n\tif (!angleRanges) {\n\t\treturn false\n\t}\n\n\tconst angle = (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI + 180\n\n\tfor (let i = 0; i < angleRanges.length; ++i) {\n\t\tconst ar = angleRanges[i]\n\t\tif (\n\t\t\tar &&\n\t\t\t(ar.start == null || angle >= ar.start) &&\n\t\t\t(ar.end == null || angle <= ar.end)\n\t\t) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"],"names":["distance","x1","y1","x2","y2","Math","sqrt","pow","abs","inAngleRanges","angleRanges","angle","atan2","PI","i","length","ar","start","end"],"mappings":"AAEA,OAAO,SAASA,QAAQ,CACvBC,EAAU,EACVC,EAAU,EACVC,EAAU,EACVC,EAAU,EACD;IACT,OAAOC,IAAI,CAACC,IAAI,CACfD,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,GAAG,CAACL,EAAE,GAAGF,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACF,IAAI,CAACG,GAAG,CAACJ,EAAE,GAAGF,EAAE,CAAC,EAAE,CAAC,CAAC,CAC/D,CAAA;CACD;AAED,OAAO,SAASO,aAAa,CAC5BR,EAAU,EACVC,EAAU,EACVC,EAAU,EACVC,EAAU,EACVM,WAAqC,EAC3B;IACV,IAAI,CAACA,WAAW,EAAE;QACjB,OAAO,KAAK,CAAA;KACZ;IAED,MAAMC,KAAK,GAAG,AAACN,IAAI,CAACO,KAAK,CAACR,EAAE,GAAGF,EAAE,EAAEC,EAAE,GAAGF,EAAE,CAAC,GAAG,GAAG,GAAII,IAAI,CAACQ,EAAE,GAAG,GAAG;IAElE,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAE,EAAED,CAAC,CAAE;QAC5C,MAAME,EAAE,GAAGN,WAAW,CAACI,CAAC,CAAC;QACzB,IACCE,EAAE,IACF,CAACA,EAAE,CAACC,KAAK,IAAI,IAAI,IAAIN,KAAK,IAAIK,EAAE,CAACC,KAAK,CAAC,IACvC,CAACD,EAAE,CAACE,GAAG,IAAI,IAAI,IAAIP,KAAK,IAAIK,EAAE,CAACE,GAAG,CAAC,EAClC;YACD,OAAO,IAAI,CAAA;SACX;KACD;IAED,OAAO,KAAK,CAAA;CACZ"}